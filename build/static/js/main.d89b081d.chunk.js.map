{"version":3,"sources":["component/Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","this","props","flt","wid","typ","onClick","action","symbol","Component","App","reset","setState","current","backspace","state","length","slice","addToCurrent","toReset","calculate","String","eval","buttons","cols","type","value","map","btn","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAEMA,E,uKAEO,IAAD,OACJ,OACI,6BACI,4BAAQC,UAAS,4BAAuBC,KAAKC,MAAMC,IAAlC,kBAA+CF,KAAKC,MAAME,IAA1D,gBAAqEH,KAAKC,MAAMG,KAAOC,QAAS,kBAAM,EAAKJ,MAAMK,OAAO,EAAKL,MAAMM,UAAUP,KAAKC,MAAMM,a,GALpKC,aAWNV,O,gnCCRTW,I,0VACJ,aAAYR,OAAO,IAAD,8KAChB,uBAAMA,OADU,MAOlBS,MAAQ,WACN,MAAKC,SAAS,CAACC,QAAS,OARR,MAUlBC,UAAY,WACqB,IAA5B,MAAKC,MAAMF,QAAQG,OACpB,MAAKJ,SAAS,CAACC,QAAS,MAG1B,MAAKD,SAAS,CAACC,QAAS,MAAKE,MAAMF,QAAQI,MAAM,EAAE,MAAKF,MAAMF,QAAQG,OAAO,MAf7D,MAkBlBE,aAAe,SAACV,GACgB,MAAvB,MAAKO,MAAMF,SAA8B,MAAXL,GAAoB,MAAKO,MAAMI,QAChE,MAAKP,SAAS,CAACC,QAAQL,IAEvB,MAAKI,SAAS,CAACC,QAAS,MAAKE,MAAMF,QAAQL,KAtB/B,MAwBlBY,UAAY,SAACZ,QACT,MAAKI,SAAS,CAACC,QAAUQ,OAAOC,KAAK,MAAKP,MAAMF,aAtBlD,MAAKE,MAAQ,CACXF,QAAS,KAJK,M,+LA6BhB,IAAMU,EAAU,CACd,CAACf,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKU,MAAMR,IAAI,GAC7D,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,WAAWE,OAAQN,KAAKiB,aAAaf,IAAI,GACzE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,WAAWE,OAAQN,KAAKiB,aAAaf,IAAI,GACzE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,WAAWE,OAAQN,KAAKiB,aAAaf,IAAI,GACzE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,WAAWE,OAAQN,KAAKiB,aAAaf,IAAI,GACzE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,WAAWE,OAAQN,KAAKiB,aAAaf,IAAI,GACzE,CAACK,OAAQ,SAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKa,UAAUX,IAAI,GACjE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,MAAME,OAAQN,KAAKiB,aAAaf,IAAI,GACpE,CAACK,OAAQ,IAAIgB,KAAK,EAAEpB,IAAI,GAAGC,IAAK,WAAWE,OAAQN,KAAKmB,UAAUjB,IAAI,IAI1E,OACE,kEAAKH,UAAU,gBACb,iEAAIA,UAAU,SAAd,cACA,oEAAOA,UAAU,SAASyB,KAAK,OAAOC,MAAOzB,KAAKc,MAAMF,UACvDU,EAAQI,KAAI,SAACC,EAAIC,GAChB,OAAQ,2DAAC,iDAAD,CAAQC,IAAKD,EAAGrB,OAAQoB,EAAIpB,OAAQgB,KAAMI,EAAIJ,KAAMrB,IAAKyB,EAAIzB,IAAKC,IAAKwB,EAAIxB,IAAKC,IAAKuB,EAAIvB,IAAKE,OAAQ,SAACC,GAAD,OAAYoB,EAAIrB,OAAOC,c,KA1D3HC,8CAkEHC,2B,gKC3DKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5B,EAAA,EAAD,OAEF6B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d89b081d.chunk.js","sourcesContent":["import React, {Component} from 'react'; \r\n\r\nclass Button extends Component{\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <button className={`Calci-buttons btn-${this.props.flt} width-${this.props.wid} typ-${this.props.typ}`} onClick={() => this.props.action(this.props.symbol)}>{this.props.symbol}</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Button;","import React,{Component} from 'react';\nimport './component/Button';\nimport Button from './component/Button';\nimport \"./css/style.css\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      current :'0',\n    }\n  }\n  reset = () => {\n    this.setState({current: '0'});\n  }\n  backspace = () => {\n    if(this.state.current.length===1){\n      this.setState({current: '0'});\n    }\n    else {\n    this.setState({current: this.state.current.slice(0,this.state.current.length-1)});\n    }\n  }\n  addToCurrent = (symbol) => {\n      if ((this.state.current === \"0\" && symbol !== \".\") || (this.state.toReset)){\n        this.setState({current:symbol});}\n      else{\n        this.setState({current: this.state.current+symbol});}\n    }\n  calculate = (symbol) => {\n      this.setState({current : String(eval(this.state.current))});\n    \n  }\n  render (){\n    const buttons = [\n      {symbol: 'C',cols:1,wid:50,typ: 'clr',action: this.reset,flt:1},\n      {symbol: '/',cols:1,wid:25,typ: 'operator',action: this.addToCurrent,flt:1},\n      {symbol: '%',cols:1,wid:25,typ: 'operator',action: this.addToCurrent,flt:0},\n      {symbol: '7',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '8',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '9',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '*',cols:1,wid:25,typ: 'operator',action: this.addToCurrent,flt:0},\n      {symbol: '4',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '5',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '6',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '-',cols:1,wid:25,typ: 'operator',action: this.addToCurrent,flt:0},\n      {symbol: '1',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '2',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '3',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '+',cols:1,wid:25,typ: 'operator',action: this.addToCurrent,flt:0},\n      {symbol: 'âŒ«',cols:1,wid:25,typ: 'bck',action: this.backspace,flt:1},\n      {symbol: '0',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '.',cols:1,wid:25,typ: 'num',action: this.addToCurrent,flt:1},\n      {symbol: '=',cols:1,wid:25,typ: 'operator',action: this.calculate,flt:1}\n\n\n    ];\n  return (\n    <div className=\"App calc-box\">\n      <h1 className=\"title\">Calculator</h1>\n      <input className=\"result\" type=\"text\" value={this.state.current} />\n      {buttons.map((btn,i) => {\n        return (<Button key={i} symbol={btn.symbol} cols={btn.cols} flt={btn.flt} wid={btn.wid} typ={btn.typ} action={(symbol) => btn.action(symbol)}/>)\n      })}\n      \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}